import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.IOException;

public class LibGui {
    public LibraryLMS librarySystem;
    public JFrame frame;
    public JTextField filePathField;
    public JTextArea displayArea;

    public LibGui() {
        librarySystem = new LibraryLMS();
        initializeUI();
    }

    public void initializeUI() {
        frame = new JFrame("Library Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setSize(800, 600);

        // Top Panel for file input
        JPanel filePanel = new JPanel();
        filePathField = new JTextField(20);
        JButton loadButton = new JButton("Load Books");
        loadButton.addActionListener(this::loadBooksAction);
        filePanel.add(filePathField);
        filePanel.add(loadButton);

        // Display area
        displayArea = new JTextArea();
        displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);

        // Bottom Panel for actions
        JPanel actionPanel = new JPanel();
        setupActionPanel(actionPanel);

        frame.add(filePanel, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.add(actionPanel, BorderLayout.SOUTH);

        frame.setVisible(true);
    }

    public void setupActionPanel(JPanel panel) {
        JButton listBooksButton = new JButton("List Books");
        listBooksButton.addActionListener(e -> listBooksAction());

        JButton removeByIdButton = new JButton("Remove by ID");
        removeByIdButton.addActionListener(e -> removeByIdAction());

        JButton removeByTitleButton = new JButton("Remove by Title");
        removeByTitleButton.addActionListener(e -> removeByTitleAction());

        JButton checkOutButton = new JButton("Check Out");
        checkOutButton.addActionListener(e -> checkOutAction());

        JButton checkInButton = new JButton("Check In");
        checkInButton.addActionListener(e -> checkInAction());

        JButton exitButton = new JButton("Exit");
        exitButton.addActionListener(e -> frame.dispose());

        panel.add(listBooksButton);
        panel.add(removeByIdButton);
        panel.add(removeByTitleButton);
        panel.add(checkOutButton);
        panel.add(checkInButton);
        panel.add(exitButton);
    }

    // Method stubs for actions
    public void loadBooksAction(ActionEvent e) {
            String filePath = filePathField.getText().trim();
            if (filePath.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Please enter a file path.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            librarySystem.loadLibraryData(filePath);
            listBooksAction();
        }

    public void listBooksAction() {
        StringBuilder booksDisplay = new StringBuilder();
        for (Book book : librarySystem.library) {
            booksDisplay.append(book).append("\n");
        }
        displayArea.setText(booksDisplay.toString());
    }

    public void removeByIdAction() {
            String idString = JOptionPane.showInputDialog(frame, "Enter the ID of the book to remove:");
            if (idString != null && !idString.trim().isEmpty()) {
                try {
                    int id = Integer.parseInt(idString.trim());
                    boolean success = librarySystem.removeBookById(id);
                    if (success) {
                        JOptionPane.showMessageDialog(frame, "Book removed successfully!");
                    } else {
                        JOptionPane.showMessageDialog(frame, "Book with ID " + id + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(frame, "Invalid ID format.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            listBooksAction();

    }

    public void removeByTitleAction() {
            String title = JOptionPane.showInputDialog(frame, "Enter the title of the book to remove:");
            if (title != null && !title.trim().isEmpty()) {
                boolean success = librarySystem.removeBookByTitle(title.trim());
                if (success) {
                    JOptionPane.showMessageDialog(frame, "Book removed successfully!");
                } else {
                    JOptionPane.showMessageDialog(frame, "Book titled '" + title + "' not found.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            listBooksAction();
        }


    public void checkOutAction() {
            String title = JOptionPane.showInputDialog(frame, "Enter the title of the book to check out:");
            if (title != null && !title.trim().isEmpty()) {
                boolean success = librarySystem.checkOutBook(title.trim());
                if (success) {
                    JOptionPane.showMessageDialog(frame, "Book checked out successfully!");
                } else {
                    JOptionPane.showMessageDialog(frame, "Book not found or already checked out.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            listBooksAction();
        }


    public void checkInAction() {
            String title = JOptionPane.showInputDialog(frame, "Enter the title of the book to check in:");
            if (title != null && !title.trim().isEmpty()) {
                boolean success = librarySystem.checkInBook(title.trim());
                if (success) {
                    JOptionPane.showMessageDialog(frame, "Book checked in successfully!");
                } else {
                    JOptionPane.showMessageDialog(frame, "Book not found or not checked out.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            listBooksAction(); // Refresh the displayed book list
        }


    public static void main(String[] args) {
        SwingUtilities.invokeLater(LibGui::new);
    }
}
